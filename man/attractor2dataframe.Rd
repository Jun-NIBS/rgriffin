% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/boolnet2griffin.R
\name{attractor2dataframe}
\alias{attractor2dataframe}
\title{Convert a BoolNet attractor to dataframe.}
\usage{
attractor2dataframe(attr, sep = "/", node.names = NULL,
  Boolean = TRUE)
}
\arguments{
\item{attr}{BoolNet attractor object}

\item{sep}{string to join elements with length > 1, default "/"}

\item{node.names}{node names, by default taken from attractor object}

\item{Boolean}{return attractor in Boolean or integer format, default FALSE}
}
\value{
If Boolean=TRUE return dataframe, each column corresponds to the numebr of attractor, state, or node. If Boolean=FALSE return dataframe, each column corresponds to a property of the attractor
}
\description{
If Booleans converts a BoolNet attractor to data frame with nodes displayed in Boolean format. First column is the attractor number, second is the number of state inside the attractor, the rest of the columns correspond to each node.
If not Boolean it converts a BoolNet attractor to dataframe with properties as columns. The rownames correspond to the int value of each attractor, in the case of cycles the state are joined by sep. Each property of attr$attractors corresponds to a dataframe column. If the property has elements with length > 1 it converts them to a string and joins them with sep.
}
\examples{
attr <- getAttractors(cellcycle)
attractor2dataframe(attr)
#              involvedStates basinSize
#1                        162       512
#2 25/785/849/449/389/141/157       512

attractor2dataframe(attr, Boolean=TRUE)
#   attractor state CycD Rb E2F CycE CycA p27 Cdc20 Cdh1 UbcH10 CycB
#1         1     1    0  1   0    0    0   1     0    1      0    0
#2         2     1    1  0   0    1    1   0     0    0      0    0
#3         2     2    1  0   0    0    1   0     0    0      1    1
#4         2     3    1  0   0    0    1   0     1    0      1    1
#5         2     4    1  0   0    0    0   0     1    1      1    0
#6         2     5    1  0   1    0    0   0     0    1      1    0
#7         2     6    1  0   1    1    0   0     0    1      0    0
#8         2     7    1  0   1    1    1   0     0    1      0    0
}
